openapi: 3.0.3
info:
  title: PlantExchange - Gang of Fork
  description: |-
    This is the first version of the API running the PlantExchange anonymous crypto-currency marketplace.
    It will be rebuilt decentralized in the first half of 2023.
    Learn more about this application by clicking on the links below.
    
  contact:
    email: mail@gang-of-fork.de
  version: 0.0.1
externalDocs:
  description: Find out more about this application
  url: https://plantexchange.gang-of-fork.de
servers:
  - url: https://api.plantexchange.gang-of-fork.de/api/v1
tags:
  - name: auth
    description: Everything about registration and authentication
  - name: offers
    description: Routes for offers
paths:
  /auth/register:
    post:
      # move when needed
      #security:
      #  - bearerJWT: []
      tags:
        - auth
      summary: Register a new user
      description: Add a new user to the user collection
      operationId: postRegister
      requestBody:
        description: Register a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUser'
        required: true
      responses:
        '201':
          description: User was created successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/login/{publicAddress}:
    get:
      tags:
        - auth
      summary: Get Nonce for Login Process
      description: Get the nonce, that needs to be signed by Metamask for the authentication process
      operationId: getLogin
      parameters:
          - in: path
            name: publicAddress
            schema:
              type: string
              format: hex
            required: true
          
      responses:
        '200':
          description: Basic User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUser'
        '400':
          description: Invalid input
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/login:
    post:
      # move when needed
      #security:
      #  - bearerJWT: []
      tags:
        - auth
      summary: Register a new user
      description: Add a new user to the user collection
      operationId: postLogin
      requestBody:
        description: Login a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema: 
                type: object
                properties:
                  jwt: 
                    type: string
                    format: JWT
                  
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Signature authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/error'
  
  /offers:
    get:
      summary: Get list of all offers
      description: Get a List of all offers
      responses:
        200:
          description: List of all offers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Offer'
                  count:
                    type: integer
    post:
      summary: Create a new offer
      description: Create a new offer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
      responses:
        201:
          description: offer created
          
  /offers/{offerId}:
    parameters:
      - in: path
        name: offerId
        required: true
        schema:
          type: string
    get:
      summary: Get list of all offers
      description: Get a List of all offers
      responses:
        200:
          description: List of all offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'

    delete:
      summary: Delete an offer
      description: Delete an offer by id
      responses:
        201:
          description: offer deleted

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
          readOnly: true
        publicAddress:
          type: string
          format: Metamask Wallet Address
        nonce:
          type: integer
          example: 1234
          readOnly: true

    registerUser:
      type: object
      properties:
        publicAddress:
          type: string
          format: Metamask Wallet Address
          
    loginUser:
      type: object
      properties:
        publicAddress:
          type: string
          format: hex
        signature:
          type: string
          format: hex
    
    Offer:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        type:
          type: string
          enum: [ 'BUY', 'SELL' ]
        location:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
        crypto:
          type: string
          enum: [ 'BTC', 'ETH', 'MON', 'CLT' ]
        currency:
          type: string
          enum: [ 'GBP', 'USD', 'CAD', 'EUR' ]

          
    error:
      type: object
      properties:
        statusCode:
          type: number
          format: HTTP-Statuscode
        msg: 
          type: string
  securitySchemes:
    bearerJWT:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  
    
      
security:
  - bearerJWT: [] 
        

    